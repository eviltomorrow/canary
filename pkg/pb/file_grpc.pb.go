// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: file.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileClient is the client API for File service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileClient interface {
	Compare(ctx context.Context, opts ...grpc.CallOption) (File_CompareClient, error)
	Push(ctx context.Context, opts ...grpc.CallOption) (File_PushClient, error)
}

type fileClient struct {
	cc grpc.ClientConnInterface
}

func NewFileClient(cc grpc.ClientConnInterface) FileClient {
	return &fileClient{cc}
}

func (c *fileClient) Compare(ctx context.Context, opts ...grpc.CallOption) (File_CompareClient, error) {
	stream, err := c.cc.NewStream(ctx, &File_ServiceDesc.Streams[0], "/canary.File/Compare", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileCompareClient{stream}
	return x, nil
}

type File_CompareClient interface {
	Send(*FileInfo) error
	Recv() (*FileTodo, error)
	grpc.ClientStream
}

type fileCompareClient struct {
	grpc.ClientStream
}

func (x *fileCompareClient) Send(m *FileInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileCompareClient) Recv() (*FileTodo, error) {
	m := new(FileTodo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileClient) Push(ctx context.Context, opts ...grpc.CallOption) (File_PushClient, error) {
	stream, err := c.cc.NewStream(ctx, &File_ServiceDesc.Streams[1], "/canary.File/Push", opts...)
	if err != nil {
		return nil, err
	}
	x := &filePushClient{stream}
	return x, nil
}

type File_PushClient interface {
	Send(*FileData) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type filePushClient struct {
	grpc.ClientStream
}

func (x *filePushClient) Send(m *FileData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *filePushClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileServer is the server API for File service.
// All implementations must embed UnimplementedFileServer
// for forward compatibility
type FileServer interface {
	Compare(File_CompareServer) error
	Push(File_PushServer) error
	mustEmbedUnimplementedFileServer()
}

// UnimplementedFileServer must be embedded to have forward compatible implementations.
type UnimplementedFileServer struct {
}

func (UnimplementedFileServer) Compare(File_CompareServer) error {
	return status.Errorf(codes.Unimplemented, "method Compare not implemented")
}
func (UnimplementedFileServer) Push(File_PushServer) error {
	return status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedFileServer) mustEmbedUnimplementedFileServer() {}

// UnsafeFileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServer will
// result in compilation errors.
type UnsafeFileServer interface {
	mustEmbedUnimplementedFileServer()
}

func RegisterFileServer(s grpc.ServiceRegistrar, srv FileServer) {
	s.RegisterService(&File_ServiceDesc, srv)
}

func _File_Compare_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServer).Compare(&fileCompareServer{stream})
}

type File_CompareServer interface {
	Send(*FileTodo) error
	Recv() (*FileInfo, error)
	grpc.ServerStream
}

type fileCompareServer struct {
	grpc.ServerStream
}

func (x *fileCompareServer) Send(m *FileTodo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileCompareServer) Recv() (*FileInfo, error) {
	m := new(FileInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _File_Push_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServer).Push(&filePushServer{stream})
}

type File_PushServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*FileData, error)
	grpc.ServerStream
}

type filePushServer struct {
	grpc.ServerStream
}

func (x *filePushServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *filePushServer) Recv() (*FileData, error) {
	m := new(FileData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// File_ServiceDesc is the grpc.ServiceDesc for File service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var File_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "canary.File",
	HandlerType: (*FileServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Compare",
			Handler:       _File_Compare_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Push",
			Handler:       _File_Push_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "file.proto",
}
